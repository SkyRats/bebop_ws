#!/usr/bin/env python

PACKAGE = "drone_control"

from dynamic_reconfigure.parameter_generator_catkin import *
import yaml
import rospkg

rospack = rospkg.RosPack()

config_doc = open(str(rospack.get_path('drone_control')+'/config/bebop2_config.yaml'), 'r')
config_data = yaml.load(config_doc)


gen = ParameterGenerator()

# gen.add("int_param",    int_t,    0, "An Integer parameter", 50,  0, 100)
gen.add("P_x", double_t, 0, "proportional parameter for PID vel control over x axis",    float(config_data.P_x), 0,   10)
gen.add("P_y", double_t, 0, "proportional parameter for PID vel control over y axis",    float(config_data.P_y), 0,   10)
gen.add("P_z", double_t, 0, "proportional parameter for PID vel control over z axis",    float(config_data.P_z), 0,   10)
gen.add("I_x", double_t, 0, "integrative parameter for PID vel control over x axis",    float(config_data.I_x), -10,   10)
gen.add("I_y", double_t, 0, "integrative parameter for PID vel control over y axis",    float(config_data.I_y), -10,   10)
gen.add("I_z", double_t, 0, "integrative parameter for PID vel control over z axis",    float(config_data.I_z), -10,   10)
gen.add("D_x", double_t, 0, "derivative parameter for PID vel control over x axis",    float(config_data.D_x), -10,   10)
gen.add("D_y", double_t, 0, "derivative parameter for PID vel control over y axis",    float(config_data.D_y), -10,   10)
gen.add("D_z", double_t, 0, "derivative parameter for PID vel control over y axis",    float(config_data.D_z), -10,   10)

gen.add("scale_factor", double_t, 0, "used to correct the scale of slam point cloud",    1, 0, 50)

gen.add("offset_pose_x", double_t, 0, "offset pose on x", 0, -100, 100)
gen.add("offset_pose_y", double_t, 0, "offset pose on y", 0, -100, 100)
gen.add("offset_pose_z", double_t, 0, "offset pose on z", 0, -100, 100)


    # gen.add("str_param",    str_t,    0, "A string parameter",  "Hello World")
gen.add("vso_on",   bool_t,   0, "visual odometry Boolean parameter",  False)

    # size_enum = gen.enum([ gen.const("Small",      int_t, 0, "A small constant"),
    #                        gen.const("Medium",     int_t, 1, "A medium constant"),
    #                        gen.const("Large",      int_t, 2, "A large constant"),
    #                        gen.const("ExtraLarge", int_t, 3, "An extra large constant")],
    #                      "An enum to set size")

    # gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)

exit(gen.generate(PACKAGE, "drone_control", "Control"))
